
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, AlertTriangle, Shield, ExternalLink, Info, Server, CheckCircle2, XCircle } from "lucide-react";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";

interface ServerInfo {
  server?: string;
  contentType?: string;
  securityHeaders?: {
    'X-Frame-Options'?: string;
    'X-XSS-Protection'?: string;
    'Content-Security-Policy'?: string;
    'Strict-Transport-Security'?: string;
  };
}

interface Vulnerability {
  type: string;
  url: string;
  parameter: string;
  method: string;
  payload: string;
  evidence: string;
  severity: string;
  description?: string;
  remediation?: string;
}

interface ScanResult {
  status: string;
  target_url: string;
  scan_date: string;
  total_vulnerabilities: number;
  vulnerabilities: Vulnerability[];
  server_info?: ServerInfo;
  error?: string;
}

export function VulnerabilityScanner() {
  const { toast } = useToast();
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [isAdvancedScanning, setIsAdvancedScanning] = useState(false);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [scanError, setScanError] = useState<string | null>(null);
  const [scanType, setScanType] = useState<'standard' | 'advanced'>('standard');

  const handleScan = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a URL to scan",
        variant: "destructive",
      });
      return;
    }

    // Basic URL validation
    try {
      new URL(url);
    } catch (e) {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL (e.g., https://example.com)",
        variant: "destructive",
      });
      return;
    }

    if (scanType === 'standard') {
      await performStandardScan();
    } else {
      await performAdvancedScan();
    }
  };

  const performStandardScan = async () => {
    setIsScanning(true);
    setScanResult(null);
    setScanError(null);
    
    try {
      toast({
        title: "Scanning",
        description: "Starting vulnerability scan... This may take a moment.",
      });

      console.log("Invoking scan_vulnerability function with URL:", url);
      
      const { data, error } = await supabase.functions.invoke('scan_vulnerability', {
        body: { url },
      });

      if (error) {
        console.error("Supabase function error:", error);
        throw new Error(error.message || "Failed to scan the website");
      }

      console.log("Scan result:", data);
      setScanResult(data);
      
      if (data.status === "error") {
        setScanError(data.error || "An unknown error occurred during the scan");
        toast({
          title: "Scan Error",
          description: data.error || "An unknown error occurred during the scan",
          variant: "destructive",
        });
      } else {
        toast({
          title: "Scan Complete",
          description: `Found ${data.total_vulnerabilities} vulnerabilities`,
          variant: data.total_vulnerabilities > 0 ? "destructive" : "default",
        });
      }
    } catch (error) {
      console.error("Error scanning website:", error);
      setScanError(error instanceof Error ? error.message : "Failed to scan the website");
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to scan the website",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
    }
  };

  const performAdvancedScan = async () => {
    setIsAdvancedScanning(true);
    setScanResult(null);
    setScanError(null);
    
    try {
      toast({
        title: "Advanced Scanning",
        description: "Starting comprehensive vulnerability scan... This may take several minutes.",
      });

      console.log("Invoking advanced_scan_vulnerability function with URL:", url);
      
      const { data, error } = await supabase.functions.invoke('advanced_scan_vulnerability', {
        body: { url },
      });

      if (error) {
        console.error("Supabase function error:", error);
        throw new Error(error.message || "Failed to perform advanced scan");
      }

      console.log("Advanced scan result:", data);
      setScanResult(data);
      
      if (data.status === "error") {
        setScanError(data.error || "An unknown error occurred during the advanced scan");
        toast({
          title: "Advanced Scan Error",
          description: data.error || "An unknown error occurred during the advanced scan",
          variant: "destructive",
        });
      } else {
        toast({
          title: "Advanced Scan Complete",
          description: `Found ${data.total_vulnerabilities} vulnerabilities`,
          variant: data.total_vulnerabilities > 0 ? "destructive" : "default",
        });
      }
    } catch (error) {
      console.error("Error during advanced scan:", error);
      setScanError(error instanceof Error ? error.message : "Failed to complete the advanced scan");
      toast({
        title: "Advanced Scan Error",
        description: error instanceof Error ? error.message : "Failed to complete the advanced scan",
        variant: "destructive",
      });
    } finally {
      setIsAdvancedScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Function to safely display URLs
  const formatUrl = (urlString: string): string => {
    try {
      const url = new URL(urlString);
      return `${url.hostname}${url.pathname}${url.search.length > 20 ? url.search.substring(0, 20) + '...' : url.search}`;
    } catch (e) {
      return urlString;
    }
  };

  // Function to render server information
  const renderServerInfo = (serverInfo?: ServerInfo) => {
    if (!serverInfo) return null;
    
    return (
      <Card className="mb-6">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium flex items-center gap-2">
            <Server className="h-5 w-5" />
            Server Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <dl className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div>
              <dt className="font-medium text-gray-500">Server</dt>
              <dd>{serverInfo.server || 'Not detected'}</dd>
            </div>
            <div>
              <dt className="font-medium text-gray-500">Content Type</dt>
              <dd>{serverInfo.contentType || 'Not detected'}</dd>
            </div>
          </dl>
          
          <div className="mt-4">
            <h4 className="font-medium text-gray-500 mb-2">Security Headers</h4>
            {serverInfo.securityHeaders && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {Object.entries(serverInfo.securityHeaders).map(([header, value]) => (
                  <div key={header} className="flex items-center gap-2">
                    {value ? (
                      <CheckCircle2 className="h-4 w-4 text-green-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-red-500" />
                    )}
                    <span className="text-sm">{header}: {value || 'Missing'}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    );
  };

  // Function to render vulnerabilities results
  const renderVulnerabilities = (vulnerabilities: Vulnerability[]) => {
    if (vulnerabilities.length === 0) {
      return (
        <Card>
          <CardContent className="text-center py-8">
            <Shield className="h-12 w-12 text-green-500 mx-auto mb-2" />
            <p className="text-green-700 font-medium">No vulnerabilities found. The website appears to be secure.</p>
          </CardContent>
        </Card>
      );
    }

    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-lg font-medium">Detected Vulnerabilities</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Type</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Parameter</TableHead>
                  <TableHead>Method</TableHead>
                  <TableHead>URL</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {vulnerabilities.map((vuln, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-medium">{vuln.type}</TableCell>
                    <TableCell>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                    </TableCell>
                    <TableCell>{vuln.parameter}</TableCell>
                    <TableCell>{vuln.method}</TableCell>
                    <TableCell className="truncate max-w-[150px]" title={vuln.url}>
                      <span className="flex items-center">
                        {formatUrl(vuln.url)}
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <button 
                                className="ml-1 text-blue-600" 
                                onClick={() => window.open(vuln.url, '_blank', 'noopener,noreferrer')}
                              >
                                <ExternalLink className="h-3 w-3" />
                              </button>
                            </TooltipTrigger>
                            <TooltipContent>Open URL</TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </span>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          <Accordion type="single" collapsible className="mt-6">
            {vulnerabilities.map((vuln, index) => (
              <AccordionItem key={index} value={`item-${index}`}>
                <AccordionTrigger className="text-left font-medium">
                  <div className="flex items-center gap-2">
                    <span>{vuln.type}</span>
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity}
                    </span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="text-sm space-y-4">
                  {vuln.description && (
                    <div>
                      <h4 className="font-medium mb-1">Description:</h4>
                      <p className="text-gray-700">{vuln.description}</p>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-medium mb-1">Evidence:</h4>
                      <p className="text-gray-700">{vuln.evidence}</p>
                    </div>
                    <div>
                      <h4 className="font-medium mb-1">Test Details:</h4>
                      <dl className="grid grid-cols-[100px_1fr] gap-1">
                        <dt className="text-gray-500">URL:</dt>
                        <dd className="break-all">{vuln.url}</dd>
                        <dt className="text-gray-500">Method:</dt>
                        <dd>{vuln.method}</dd>
                        <dt className="text-gray-500">Parameter:</dt>
                        <dd>{vuln.parameter}</dd>
                        <dt className="text-gray-500">Payload:</dt>
                        <dd className="font-mono text-xs bg-gray-100 p-1 rounded break-all">{vuln.payload}</dd>
                      </dl>
                    </div>
                  </div>
                  
                  {vuln.remediation && (
                    <div className="bg-blue-50 p-3 rounded border border-blue-200">
                      <h4 className="font-medium mb-1 flex items-center gap-1">
                        <Info className="h-4 w-4 text-blue-500" />
                        Recommended Fix:
                      </h4>
                      <p className="text-gray-700">{vuln.remediation}</p>
                    </div>
                  )}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="text-2xl font-bold flex items-center gap-2">
            <Shield className="h-6 w-6" /> 
            Website Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Enter a URL to scan for common web security vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="standard" onValueChange={(value) => setScanType(value as 'standard' | 'advanced')}>
            <TabsList className="mb-4">
              <TabsTrigger value="standard">Standard Scan</TabsTrigger>
              <TabsTrigger value="advanced">Advanced Scan</TabsTrigger>
            </TabsList>
            <TabsContent value="standard">
              <div className="p-2 bg-blue-50 rounded mb-4 text-sm text-blue-700">
                <p>Standard scan checks for common vulnerabilities with minimal impact on the target website.</p>
              </div>
            </TabsContent>
            <TabsContent value="advanced">
              <div className="p-2 bg-amber-50 rounded mb-4 text-sm text-amber-700">
                <p>Advanced scan performs a deeper analysis with more comprehensive tests and may take longer to complete.</p>
                <p className="mt-1"><strong>Warning:</strong> This scan uses Python-based analysis and may be more invasive.</p>
              </div>
            </TabsContent>
          </Tabs>

          <form onSubmit={handleScan} className="space-y-4">
            <div className="flex flex-col md:flex-row gap-4">
              <Input
                type="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="flex-1"
                disabled={isScanning || isAdvancedScanning}
                required
              />
              <Button type="submit" disabled={isScanning || isAdvancedScanning} className="shrink-0">
                {isScanning || isAdvancedScanning ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {scanType === 'standard' ? 'Scanning...' : 'Advanced Scanning...'}
                  </>
                ) : (
                  scanType === 'standard' ? "Run Standard Scan" : "Run Advanced Scan"
                )}
              </Button>
            </div>
          </form>
        </CardContent>
        <CardFooter className="text-sm text-gray-500 pt-0">
          <div className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-amber-500" />
            <span>Only scan websites you are authorized to test.</span>
          </div>
        </CardFooter>
      </Card>

      {scanError && (
        <Card className="mb-8 border-red-200">
          <CardHeader className="bg-red-50 text-red-800">
            <CardTitle className="text-lg font-medium">Scan Error</CardTitle>
          </CardHeader>
          <CardContent className="pt-4">
            <p>{scanError}</p>
          </CardContent>
        </Card>
      )}

      {scanResult && (
        <div className="space-y-6">
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="text-xl font-semibold mb-2">
                {scanType === 'standard' ? 'Standard Scan Results' : 'Advanced Scan Results'}
              </CardTitle>
              <CardDescription>
                <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2">
                  <div>Target: <span className="font-medium">{scanResult.target_url}</span></div>
                  <div>Date: <span className="font-medium">{new Date(scanResult.scan_date).toLocaleString()}</span></div>
                </div>
                <div className="mt-2">
                  <Badge className={
                    scanResult.total_vulnerabilities > 0 
                      ? "bg-red-100 text-red-800 border-red-200" 
                      : "bg-green-100 text-green-800 border-green-200"
                  }>
                    {scanResult.total_vulnerabilities} vulnerabilities found
                  </Badge>
                </div>
              </CardDescription>
            </CardHeader>
          </Card>

          {scanResult.server_info && renderServerInfo(scanResult.server_info)}

          {renderVulnerabilities(scanResult.vulnerabilities)}
        </div>
      )}

      <Card className="mt-8">
        <CardHeader>
          <CardTitle className="text-lg font-medium">About this Scanner</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <p className="text-sm text-gray-600">
            This tool scans websites for common security vulnerabilities such as:
          </p>
          <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
            <li><span className="font-medium">SQL Injection</span> - When user input can manipulate database queries</li>
            <li><span className="font-medium">Cross-Site Scripting (XSS)</span> - When malicious scripts can be injected into websites</li>
            <li><span className="font-medium">Cross-Site Request Forgery (CSRF)</span> - When unauthorized commands can be transmitted from a trusted user</li>
            <li><span className="font-medium">Directory Traversal</span> - When attackers can access restricted directories</li>
            <li><span className="font-medium">Server-Side Request Forgery (SSRF)</span> - When attackers can make the server perform unintended requests</li>
            <li><span className="font-medium">File Upload Vulnerabilities</span> - When attackers can upload malicious files to the server</li>
            <li><span className="font-medium">Missing Security Headers</span> - When important HTTP security headers are not configured</li>
          </ul>
          <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <p className="text-sm text-blue-800 flex items-start">
              <Info className="h-5 w-5 mr-2 shrink-0 text-blue-500" />
              <span><strong>Standard vs Advanced:</strong> The standard scan performs basic checks quickly, while the advanced scan uses Python-based analysis for more comprehensive testing.</span>
            </p>
          </div>
          <div className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-md">
            <p className="text-sm text-amber-800 flex items-start">
              <AlertTriangle className="h-5 w-5 mr-2 shrink-0 text-amber-500" />
              <span><strong>Important:</strong> Only use this scanner on websites you own or have explicit permission to test. Unauthorized scanning may be illegal and unethical.</span>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
