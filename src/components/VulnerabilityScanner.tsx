
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, AlertTriangle, Shield, ExternalLink } from "lucide-react";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface Vulnerability {
  type: string;
  url: string;
  parameter: string;
  method: string;
  payload: string;
  evidence: string;
  severity: string;
}

interface ScanResult {
  status: string;
  target_url: string;
  scan_date: string;
  total_vulnerabilities: number;
  vulnerabilities: Vulnerability[];
  error?: string;
}

export function VulnerabilityScanner() {
  const { toast } = useToast();
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [scanError, setScanError] = useState<string | null>(null);

  const handleScan = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a URL to scan",
        variant: "destructive",
      });
      return;
    }

    // Basic URL validation
    try {
      new URL(url);
    } catch (e) {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL (e.g., https://example.com)",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanResult(null);
    setScanError(null);
    
    try {
      toast({
        title: "Scanning",
        description: "Starting vulnerability scan... This may take a moment.",
      });

      const { data, error } = await supabase.functions.invoke('scan_vulnerability', {
        body: { url },
      });

      if (error) {
        throw new Error(error.message || "Failed to scan the website");
      }

      console.log("Scan result:", data);
      setScanResult(data);
      
      if (data.status === "error") {
        setScanError(data.error || "An unknown error occurred during the scan");
        toast({
          title: "Scan Error",
          description: data.error || "An unknown error occurred during the scan",
          variant: "destructive",
        });
      } else {
        toast({
          title: "Scan Complete",
          description: `Found ${data.total_vulnerabilities} vulnerabilities`,
          variant: data.total_vulnerabilities > 0 ? "destructive" : "default",
        });
      }
    } catch (error) {
      console.error("Error scanning website:", error);
      setScanError(error instanceof Error ? error.message : "Failed to scan the website");
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to scan the website",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="text-2xl font-bold flex items-center gap-2">
            <Shield className="h-6 w-6" /> 
            Website Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Enter a URL to scan for common web security vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleScan} className="space-y-4">
            <div className="flex flex-col md:flex-row gap-4">
              <Input
                type="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="flex-1"
                disabled={isScanning}
                required
              />
              <Button type="submit" disabled={isScanning} className="shrink-0">
                {isScanning ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  "Scan for Vulnerabilities"
                )}
              </Button>
            </div>
          </form>
        </CardContent>
        <CardFooter className="text-sm text-gray-500 pt-0">
          <div className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-amber-500" />
            <span>Only scan websites you are authorized to test.</span>
          </div>
        </CardFooter>
      </Card>

      {scanError && (
        <Card className="mb-8 border-red-200">
          <CardHeader className="bg-red-50 text-red-800">
            <CardTitle className="text-lg font-medium">Scan Error</CardTitle>
          </CardHeader>
          <CardContent className="pt-4">
            <p>{scanError}</p>
          </CardContent>
        </Card>
      )}

      {scanResult && (
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-xl font-semibold mb-2">Scan Results</CardTitle>
            <CardDescription>
              <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2">
                <div>Target: <span className="font-medium">{scanResult.target_url}</span></div>
                <div>Date: <span className="font-medium">{new Date(scanResult.scan_date).toLocaleString()}</span></div>
              </div>
              <div className="mt-2">
                <Badge className={
                  scanResult.total_vulnerabilities > 0 
                    ? "bg-red-100 text-red-800 border-red-200" 
                    : "bg-green-100 text-green-800 border-green-200"
                }>
                  {scanResult.total_vulnerabilities} vulnerabilities found
                </Badge>
              </div>
            </CardDescription>
          </CardHeader>
          <CardContent>
            {scanResult.vulnerabilities.length > 0 ? (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Type</TableHead>
                      <TableHead>Severity</TableHead>
                      <TableHead>Parameter</TableHead>
                      <TableHead>Method</TableHead>
                      <TableHead>URL</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {scanResult.vulnerabilities.map((vuln, index) => (
                      <TableRow key={index}>
                        <TableCell className="font-medium">{vuln.type}</TableCell>
                        <TableCell>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity}
                          </span>
                        </TableCell>
                        <TableCell>{vuln.parameter}</TableCell>
                        <TableCell>{vuln.method}</TableCell>
                        <TableCell className="truncate max-w-[150px]" title={vuln.url}>
                          <a 
                            href={vuln.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="flex items-center hover:underline text-blue-600"
                          >
                            {new URL(vuln.url).hostname}
                            <ExternalLink className="h-3 w-3 ml-1" />
                          </a>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            ) : (
              <div className="text-center py-6 bg-green-50 rounded-lg border border-green-200">
                <Shield className="h-12 w-12 text-green-500 mx-auto mb-2" />
                <p className="text-green-700 font-medium">No vulnerabilities found. The website appears to be secure.</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      <Card>
        <CardHeader>
          <CardTitle className="text-lg font-medium">About this Scanner</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <p className="text-sm text-gray-600">
            This tool scans websites for common security vulnerabilities such as:
          </p>
          <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
            <li><span className="font-medium">SQL Injection</span> - When user input can manipulate database queries</li>
            <li><span className="font-medium">Cross-Site Scripting (XSS)</span> - When malicious scripts can be injected into websites</li>
            <li><span className="font-medium">Cross-Site Request Forgery (CSRF)</span> - When unauthorized commands can be transmitted from a trusted user</li>
            <li><span className="font-medium">Directory Traversal</span> - When attackers can access restricted directories</li>
          </ul>
          <div className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-md">
            <p className="text-sm text-amber-800 flex items-start">
              <AlertTriangle className="h-5 w-5 mr-2 shrink-0 text-amber-500" />
              <span><strong>Important:</strong> Only use this scanner on websites you own or have explicit permission to test. Unauthorized scanning may be illegal and unethical.</span>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
