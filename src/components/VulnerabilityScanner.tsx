
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { supabase } from "@/integrations/supabase/client";
import { Loader2 } from "lucide-react";

interface Vulnerability {
  type: string;
  url: string;
  parameter: string;
  method: string;
  payload: string;
  evidence: string;
  severity: string;
}

interface ScanResult {
  status: string;
  target_url: string;
  scan_date: string;
  total_vulnerabilities: number;
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityScanner() {
  const { toast } = useToast();
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);

  const handleScan = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a URL to scan",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanResult(null);
    
    try {
      toast({
        title: "Scanning",
        description: "Starting vulnerability scan...",
      });

      const { data, error } = await supabase.functions.invoke('scan_vulnerability', {
        body: { url },
      });

      if (error) {
        throw new Error(error.message || "Failed to scan the website");
      }

      console.log("Scan result:", data);
      setScanResult(data);
      
      toast({
        title: "Scan Complete",
        description: `Found ${data.total_vulnerabilities} vulnerabilities`,
        variant: data.total_vulnerabilities > 0 ? "destructive" : "default",
      });
    } catch (error) {
      console.error("Error scanning website:", error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to scan the website",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Website Vulnerability Scanner</h1>
        <p className="text-gray-600">Enter a URL to scan for common web security vulnerabilities</p>
      </div>

      <form onSubmit={handleScan} className="space-y-4 mb-8">
        <div className="flex flex-col md:flex-row gap-4">
          <Input
            type="url"
            placeholder="https://example.com"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            className="flex-1"
            disabled={isScanning}
            required
          />
          <Button type="submit" disabled={isScanning}>
            {isScanning ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Scanning...
              </>
            ) : (
              "Scan for Vulnerabilities"
            )}
          </Button>
        </div>
      </form>

      {scanResult && (
        <div className="bg-white shadow-md rounded-lg p-6 border border-gray-200">
          <div className="mb-4">
            <h2 className="text-2xl font-semibold mb-2">Scan Results</h2>
            <div className="flex justify-between">
              <p className="text-gray-600">Target: {scanResult.target_url}</p>
              <p className="text-gray-600">Date: {new Date(scanResult.scan_date).toLocaleString()}</p>
            </div>
            <div className="mt-2">
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                scanResult.total_vulnerabilities > 0 
                  ? "bg-red-100 text-red-800" 
                  : "bg-green-100 text-green-800"
              }`}>
                {scanResult.total_vulnerabilities} vulnerabilities found
              </span>
            </div>
          </div>

          {scanResult.vulnerabilities.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Parameter</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Method</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {scanResult.vulnerabilities.map((vuln, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{vuln.type}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          vuln.severity === 'High' 
                            ? 'bg-red-100 text-red-800' 
                            : vuln.severity === 'Medium'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-blue-100 text-blue-800'
                        }`}>
                          {vuln.severity}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{vuln.url}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{vuln.parameter}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{vuln.method}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-4">
              <p className="text-green-600 font-medium">No vulnerabilities found. The website appears to be secure.</p>
            </div>
          )}
        </div>
      )}

      <div className="mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200">
        <h3 className="text-lg font-medium mb-2">About this Scanner</h3>
        <p className="text-sm text-gray-600">
          This tool scans websites for common security vulnerabilities such as SQL Injection, Cross-Site Scripting (XSS), 
          Cross-Site Request Forgery (CSRF), and Directory Traversal. The scanner crawls the target website and tests 
          various entry points for potential security issues.
        </p>
        <div className="mt-2">
          <p className="text-sm text-gray-600">
            <strong>Note:</strong> Only scan websites you are authorized to test. Unauthorized scanning may be illegal.
          </p>
        </div>
      </div>
    </div>
  );
}
